package com.dzavorin.solutions.arrays;

import java.util.*;

public class AvoidFloodInTheCity {

    public int[] avoidFlood(int[] rains) {

        Map<Integer, LinkedList<Integer>> map = new HashMap<>();

        for (int i = 0; i < rains.length; i++) {
            if (rains[i] > 0) {
                map.putIfAbsent(rains[i], new LinkedList<>());
                map.get(rains[i]).add(i);
            }
        }

        int[] res = new int[rains.length];
        Set<Integer> set = new HashSet<>();
        int prev = -1;
        boolean prevFound = false;
        for (int i = 0; i < rains.length; i++) {
            prevFound = false;
            if (rains[i] == 0) {
                if (set.isEmpty()) {
                    res[i] = 1;
                    continue;
                }

                int d = prev == -1 || prev < i ? i + 1 : prev;
                while (d < rains.length - 1 && !set.contains(rains[d])) {
                    if (!prevFound && rains[d] > 0 && map.get(rains[d]) != null && map.get(rains[d]).size() > 1) {
                        prev = d;
                        prevFound = true;
                    }
                    d++;
                }

                if (!prevFound) {
                    prev = d + 1;
                }

                if (d < rains.length && map.get(rains[d]) != null) {
                    LinkedList<Integer> ids = map.get(rains[d]);
                    res[i] = rains[d];
                    res[ids.removeFirst()] = -1;
                    set.remove(rains[d]);
                } else {
                    rains[i] = 1;
                }

            } else if (rains[i] != 0) {
                LinkedList<Integer> ids = map.get(rains[i]);
                if (ids.isEmpty()) {
                    map.remove(rains[i]);
                } else if (ids.size() == 1) {
                    res[ids.get(0)] = -1;
                    map.remove(rains[i]);
                } else if (set.contains(rains[i])) {
                    return new int[0];
                } else {
                    set.add(rains[i]);
                }
            }
        }

        return set.isEmpty() ? res : new int[0];
    }

    //

    public int[] avoidFlood3(int[] rains) {
        int[] res = new int[rains.length];

        HashMap<Integer, Integer> map = new HashMap<>();
        List<Integer> zeros = new ArrayList<>();
        for (int i = 0; i < rains.length; i++) {

            if (rains[i] == 0) {
                zeros.add(i);
                res[i] = 1;
                continue;
            }

            if (map.containsKey(rains[i])) {
                Iterator<Integer> it = zeros.iterator();
                Integer next = -1;
                Integer pos = map.get(rains[i]);

                while (pos > next) {
                    if (!it.hasNext()) return new int[0];
                    next = it.next();
                }

                if (pos < next) {
                    res[next] = rains[i];
                    zeros.remove(next);
                    map.remove(rains[i]);
                }
            }

            map.put(rains[i], i);
            res[i] = -1;
        }

        return res;
    }

    // nlogn treeSet

    public int[] avoidFlood2(int[] rains) {
        int length = rains.length;
        int[] res = new int[length];
        Arrays.fill(res, 1);

        TreeSet<Integer> emptyLakes = new TreeSet<>();
        Map<Integer, Integer> fullLakes = new HashMap<>();
        for (int i = 0; i < length; i++) {
            int lake = rains[i];

            if (lake > 0) {
                res[i] = -1;

                if (fullLakes.containsKey(lake)) {
                    Integer emptyDay = emptyLakes.higher(fullLakes.get(lake));
                    if (emptyDay == null)
                        return new int[0];

                    res[emptyDay] = lake;
                    emptyLakes.remove(emptyDay);
                }
                fullLakes.put(lake, i);
            } else {
                emptyLakes.add(i);
            }
        }

        return res;
    }

    public static void main(String[] args) {
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 2, 0, 0, 2, 1})));
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 2, 3, 4})));
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{69, 0, 0, 0, 69})));
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{10, 20, 20})));
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 2, 0, 2, 1})));
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{0, 1, 1})));
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 0, 2, 0, 2, 1}))); // [-1,1,-1,2,-1,-1]
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 0, 2, 3, 0, 1, 2}))); // [-1,1,-1,-1,2,-1,-1]
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 2, 0, 2, 3, 0, 1}))); // [-1,-1,2,-1,-1,1,-1]
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 0, 1, 0, 2, 0, 2}))); // [-1,1,-1,1,-1,2,-1]
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5})));
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 1, 0, 0}))); // []
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 0, 2, 0, 3, 0, 2, 0, 0, 0, 1, 2, 3}))); // [-1,1,-1,2,-1,3,-1,2,1,1,-1,-1,-1]
        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{1, 2, 3, 0, 1, 0, 2, 0, 3}))); // [-1,1,-1,2,-1,3,-1,2,1,1,-1,-1,-1]
        System.out.println(Arrays.toString(new AvoidFloodInTheCity()
                .avoidFlood(new int[]{0, 72328, 0, 0, 94598, 54189, 39171, 53361, 0, 0, 0, 72742, 0, 98613, 16696, 0, 32756, 23537, 0, 94598, 0, 0, 0, 11594, 27703, 0, 0, 0, 20081, 0, 24645, 0, 0, 0, 0, 0, 0, 0, 2711, 98613, 0, 0, 0, 0, 0, 91987, 0, 0, 0, 22762, 23537, 0, 0, 0, 0, 54189, 0, 0, 87770, 0, 0, 0, 0, 27703, 0, 0, 0, 0, 20081, 16696, 0, 0, 0, 0, 0, 0, 0, 35903, 0, 72742, 0, 0, 0, 35903, 0, 0, 91987, 76728, 0, 0, 0, 0, 2711, 0, 0, 11594, 0, 0, 22762, 24645, 0, 0, 0, 0, 0, 53361, 0, 87770, 0, 0, 39171, 0, 24577, 0, 0, 0, 24577, 0, 0, 72328, 0, 0, 32756, 0, 0, 76728})));
//        1, -1, 72328, 1, -1, -1, -1, -1, 94598, 54189, 53361, -1, 72742, -1, -1, 98613, -1, -1, 23537, -1, 16696, 39171, 32756, -1, -1, 27703, 11594, 1, -1, 20081, -1, 24645, 1, 1, 1, 1, 1, 1, -1, -1, 2711, 1, 1, 1, 1, -1, 91987, 1, 1, -1, -1, 22762, 1, 1, 1, -1, 1, 1, -1, 87770, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 35903, -1, 1, 1, 1, -1, 1, 1, -1, -1, 76728, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 24577, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1

        System.out.println(Arrays.toString(new AvoidFloodInTheCity().avoidFlood(new int[]{98284, 57875, 0, 0, 94301, 94503, 16548, 0, 0, 37144, 0, 0, 0, 63939, 0, 0, 0, 0, 57020, 47710, 3285, 71226, 0, 24745, 0, 0, 70243, 0, 51703, 80321, 95971, 22206, 0, 43959, 84602, 77192, 0, 0, 0, 0, 0, 6407, 6477, 99867, 0, 24520, 0, 0, 0, 0, 9799, 43282, 52055, 96659, 51254, 40585, 79473, 0, 0, 0, 0, 9481, 0, 0, 0, 35881, 54126, 8792, 0, 0, 0, 22570, 0, 0, 879, 2319, 0, 4889, 46458, 0, 0, 0, 36638, 69875, 57212, 57875, 0, 0, 96659, 75448, 51766, 6379, 57212, 99867, 86167, 0, 93231, 52568, 16312, 0, 0, 19402, 0, 0, 8602, 0, 0, 0, 3285, 39361, 36638, 0, 0, 22206, 0, 38549, 94503, 14659, 0, 16548, 0, 0, 54126, 11157, 70915, 0, 0, 81337, 19893, 54920, 51766, 51244, 17717, 69787, 46075, 0, 42139, 0, 0, 0, 4428, 0, 0, 0, 0, 0, 9292, 80984, 17717, 54920, 0, 0, 18568, 0, 19946, 0, 69683, 0, 0, 0, 13735, 79530, 42193, 0, 1149, 78534, 0, 0, 0, 55452, 14864, 24745, 26551, 0, 0, 24233, 0, 79712, 0, 62236, 0, 0, 47800, 0, 6695, 40585, 0, 52402, 879, 68267, 0, 96631, 64057, 84363, 0, 0, 0, 63335, 96878, 0, 47800, 0, 0, 61952, 0, 0, 24297, 0, 0, 0, 14584, 0, 42139, 65252, 64136, 11157, 6695, 0, 14877, 0, 0, 0, 44942, 73999, 0, 0, 45572, 0, 86167, 0, 0, 0, 0, 42193, 0, 84363, 0, 63939, 0, 76503, 0, 51198, 0, 9481, 0, 6407, 0, 64277, 0, 0, 0, 1149, 3072, 0, 24233, 783, 0, 0, 9036, 39361, 22947, 0, 51703, 0, 0, 52055, 97859, 25989, 0, 0, 0, 0, 77192, 0, 0, 12234, 57020, 79530, 0, 0, 19946, 0, 0, 0, 0, 61952, 36135, 0, 0, 34886, 0, 97617, 66393, 0, 0, 80321, 0, 0, 75482, 97859, 49546, 22947, 0, 73999, 0, 0, 68267, 0, 18529, 65252, 2319, 18568, 0, 0, 0, 69939, 508, 0, 0, 0, 65617, 24520, 82199, 93231, 64015, 0, 39813, 0, 0, 0, 16814, 74810, 0, 0, 55452, 0, 43282, 39813, 0, 0, 80942, 0, 70915, 4428, 0, 43683, 0, 82199, 90187, 0, 13584, 36135, 0, 74810, 961, 0, 44942, 0, 0, 32578, 90187, 0, 69683, 0, 38549, 0, 0, 13735, 33424, 0, 59757, 64277, 6477, 0, 0, 94301, 52568, 0, 0, 0, 0, 0, 0, 0, 63505, 0, 0, 0, 51254, 0, 0, 46458, 64015, 0, 0, 66393, 58429, 0, 64136, 69875, 62236, 0, 0, 0, 0, 4770, 0, 89776, 0, 961, 34886, 62059, 0, 65617, 0, 0, 81337, 63335, 0, 0, 0, 43683, 0, 45572, 0, 0, 97617, 0, 9799, 32578, 0, 0, 0, 22570, 95971, 0, 64057, 4770, 0, 46075, 0, 0, 0, 0, 0, 96631, 0, 0, 26551, 0, 8602, 18529, 0, 0, 0, 0, 0, 60713, 0, 70243, 0, 59757, 75482, 0, 0, 78534, 0, 0, 51198, 16814, 0, 0, 58429, 0, 0, 9036, 96878, 0, 0, 71226, 51244, 76503, 0, 0, 64319, 0, 24297, 14864, 0, 25989, 12234, 62059, 0, 84602, 0, 0, 19893, 0, 783, 75448, 69939, 67299, 0, 0, 0, 75087, 0, 0, 37144, 33424, 0, 0, 67299, 0, 0, 20507, 0, 0, 69787, 49546, 14877, 9292, 0, 0, 14659, 89776, 0, 0, 0, 0, 75087, 35881, 3072, 19402, 14584, 0, 0, 13584, 508, 0, 80942, 0, 6379, 0, 0, 60713, 0, 0, 4889, 4528, 0, 0, 0, 0, 0, 0, 8792, 0, 79712, 0, 0, 0, 16312, 0, 47710, 64319, 98284, 0, 4528, 80984, 43959, 79473, 63505, 52402, 20507, 0})));
//         [-1, -1, 57875, 98284, -1, -1, -1, 94503, 16548, -1, 94301, 37144, 1, -1, 63939, 1, 1, 1, -1, -1, -1, -1, 3285, -1, 24745, 57020, -1, 70243, -1, -1, -1, -1, 22206, -1, -1, -1, 51703, 77192, 80321, 95971, 71226, -1, -1, -1, 99867, -1, 6407, 24520, 6477, 84602, -1, -1, -1, -1, -1, -1, -1, 96659, 40585, 52055, 43282, -1, 9481, 51254, 9799, -1, -1, -1, 54126, 35881, 8792, -1, 22570, 47710, -1, -1, 879, -1, -1, 2319, 46458, 4889, -1, -1, -1, -1, 57212, 36638, -1, -1, -1, -1, -1, -1, -1, 51766, -1, -1, -1, 86167, 93231, -1, 52568, 69875, -1, 8602, 75448, 19402, -1, -1, -1, 39361, 6379, -1, 16312, -1, -1, -1, 38549, -1, 14659, 43959, -1, -1, -1, 11157, 70915, -1, -1, -1, -1, -1, -1, -1, -1, 17717, -1, 54920, 42139, 81337, -1, 4428, 46075, 51244, 19893, 69787, -1, -1, -1, -1, 9292, 80984, -1, 18568, -1, 19946, -1, 69683, 79473, 1, -1, -1, -1, 42193, -1, -1, 1149, 79530, 13735, -1, -1, -1, -1, 55452, 26551, -1, 24233, -1, 78534, -1, 62236, 14864, -1, 47800, -1, -1, 6695, -1, -1, -1, 68267, -1, -1, -1, 84363, 64057, 96631, -1, -1, 63335, -1, 96878, 79712, -1, 61952, 52402, -1, 24297, 1, 1, -1, 14584, -1, -1, -1, -1, -1, 65252, -1, 64136, 14877, 1, -1, -1, 73999, 44942, -1, 45572, -1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 76503, -1, 51198, -1, 1, -1, 1, -1, 64277, 1, 1, -1, -1, 3072, -1, -1, 783, 1, -1, -1, -1, 22947, -1, 9036, 1, -1, -1, -1, 97859, 25989, 1, 1, -1, 1, 1, -1, -1, -1, 12234, 1, -1, 1, 1, 1, 1, -1, -1, 36135, 1, -1, 34886, -1, -1, 66393, 97617, -1, 1, 1, -1, -1, -1, -1, 75482, -1, 49546, 1, -1, 1, -1, -1, -1, -1, 18529, 1, 1, -1, -1, 69939, 508, 1, -1, -1, -1, -1, -1, 82199, -1, 39813, 64015, 65617, -1, -1, 74810, 16814, -1, 1, -1, -1, 1, 1, -1, 80942, -1, -1, 1, -1, 43683, -1, -1, 90187, -1, -1, 13584, -1, -1, 961, -1, 1, 1, -1, -1, 32578, -1, 1, -1, 1, 1, -1, -1, 33424, -1, -1, -1, 59757, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 63505, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 58429, -1, -1, -1, 1, 1, 1, 1, -1, 4770, -1, 89776, -1, -1, -1, 62059, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 60713, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 64319, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 67299, 1, 1, -1, 75087, 1, -1, -1, 1, 1, -1, 1, 1, -1, 20507, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, 4528, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1]
    }

}
